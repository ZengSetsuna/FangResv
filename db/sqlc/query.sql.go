// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkVenueAvailability = `-- name: CheckVenueAvailability :one
SELECT COUNT(*) 
FROM events
WHERE venue_id = $1
AND EXISTS (
    SELECT 1
    FROM (SELECT $2::TIMESTAMP AS start_time, $3::TIMESTAMP AS end_time) AS t
    WHERE (t.start_time, t.end_time) OVERLAPS (events.start_time, events.end_time)
)
`

type CheckVenueAvailabilityParams struct {
	VenueID pgtype.Int4      `json:"venue_id"`
	Column2 pgtype.Timestamp `json:"column_2"`
	Column3 pgtype.Timestamp `json:"column_3"`
}

func (q *Queries) CheckVenueAvailability(ctx context.Context, arg CheckVenueAvailabilityParams) (int64, error) {
	row := q.db.QueryRow(ctx, checkVenueAvailability, arg.VenueID, arg.Column2, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countEventParticipants = `-- name: CountEventParticipants :one
SELECT current_participants FROM events WHERE id = $1
`

func (q *Queries) CountEventParticipants(ctx context.Context, id int32) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, countEventParticipants, id)
	var current_participants pgtype.Int4
	err := row.Scan(&current_participants)
	return current_participants, err
}

const countUpcomingEvents = `-- name: CountUpcomingEvents :one
SELECT CAST(COUNT(*) AS INT4) 
FROM events
WHERE start_time > NOW()
`

func (q *Queries) CountUpcomingEvents(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, countUpcomingEvents)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (creator_id, venue_id, name, description, start_time, end_time, location, max_participants)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, creator_id, venue_id, name, description, start_time, end_time, location, max_participants, created_at, current_participants
`

type CreateEventParams struct {
	CreatorID       pgtype.Int4      `json:"creator_id"`
	VenueID         pgtype.Int4      `json:"venue_id"`
	Name            string           `json:"name"`
	Description     pgtype.Text      `json:"description"`
	StartTime       pgtype.Timestamp `json:"start_time"`
	EndTime         pgtype.Timestamp `json:"end_time"`
	Location        string           `json:"location"`
	MaxParticipants int32            `json:"max_participants"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.CreatorID,
		arg.VenueID,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.Location,
		arg.MaxParticipants,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.VenueID,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.MaxParticipants,
		&i.CreatedAt,
		&i.CurrentParticipants,
	)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password, email) VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Username, arg.Password, arg.Email)
	return err
}

const createVenue = `-- name: CreateVenue :one
INSERT INTO venues (name, address, max_capacity) VALUES ($1, $2, $3) RETURNING id, name, address, max_capacity
`

type CreateVenueParams struct {
	Name        string `json:"name"`
	Address     string `json:"address"`
	MaxCapacity int32  `json:"max_capacity"`
}

func (q *Queries) CreateVenue(ctx context.Context, arg CreateVenueParams) (Venue, error) {
	row := q.db.QueryRow(ctx, createVenue, arg.Name, arg.Address, arg.MaxCapacity)
	var i Venue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.MaxCapacity,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const deletePendingUserByEmail = `-- name: DeletePendingUserByEmail :exec
DELETE FROM pending_users WHERE email = $1
`

func (q *Queries) DeletePendingUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deletePendingUserByEmail, email)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, creator_id, venue_id, name, description, start_time, end_time, location, max_participants, created_at, current_participants FROM events WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.VenueID,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.MaxParticipants,
		&i.CreatedAt,
		&i.CurrentParticipants,
	)
	return i, err
}

const getEventDetails = `-- name: GetEventDetails :one
WITH event_info AS (
    SELECT 
        e.id AS event_id,
        e.name AS event_name,
        e.description,
        e.start_time,
        e.end_time,
        v.name AS venue_name,
        e.max_participants,
        e.current_participants,
        u.username AS organizer
    FROM events e
    JOIN venues v ON e.venue_id = v.id
    JOIN users u ON e.creator_id = u.id
    WHERE e.id = $1
),
attendees AS (
    SELECT 
        ea.event_id,
        json_agg(u.username) AS participant_usernames
    FROM event_attendees ea
    JOIN users u ON ea.user_id = u.id
    WHERE ea.event_id = $1
    GROUP BY ea.event_id
)
SELECT 
    ei.event_id,
    ei.event_name,
    ei.description,
    ei.start_time,
    ei.end_time,
    ei.venue_name AS location,
    ei.max_participants,
    ei.current_participants,
    ei.organizer,
    COALESCE(a.participant_usernames, '[]'::json) AS participants,
    (ei.current_participants < ei.max_participants) AS can_join
FROM event_info ei
LEFT JOIN attendees a ON ei.event_id = a.event_id
`

type GetEventDetailsRow struct {
	EventID             int32            `json:"event_id"`
	EventName           string           `json:"event_name"`
	Description         pgtype.Text      `json:"description"`
	StartTime           pgtype.Timestamp `json:"start_time"`
	EndTime             pgtype.Timestamp `json:"end_time"`
	Location            string           `json:"location"`
	MaxParticipants     int32            `json:"max_participants"`
	CurrentParticipants pgtype.Int4      `json:"current_participants"`
	Organizer           string           `json:"organizer"`
	Participants        []byte           `json:"participants"`
	CanJoin             bool             `json:"can_join"`
}

func (q *Queries) GetEventDetails(ctx context.Context, id int32) (GetEventDetailsRow, error) {
	row := q.db.QueryRow(ctx, getEventDetails, id)
	var i GetEventDetailsRow
	err := row.Scan(
		&i.EventID,
		&i.EventName,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.MaxParticipants,
		&i.CurrentParticipants,
		&i.Organizer,
		&i.Participants,
		&i.CanJoin,
	)
	return i, err
}

const getPendingUserByEmail = `-- name: GetPendingUserByEmail :one
SELECT id, email, username, code, expires_at, created_at FROM pending_users WHERE email = $1
`

func (q *Queries) GetPendingUserByEmail(ctx context.Context, email string) (PendingUser, error) {
	row := q.db.QueryRow(ctx, getPendingUserByEmail, email)
	var i PendingUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Code,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, created_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getVenueByID = `-- name: GetVenueByID :one
SELECT id, name, address, max_capacity FROM venues WHERE id = $1
`

func (q *Queries) GetVenueByID(ctx context.Context, id int32) (Venue, error) {
	row := q.db.QueryRow(ctx, getVenueByID, id)
	var i Venue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.MaxCapacity,
	)
	return i, err
}

const getVenueCapacity = `-- name: GetVenueCapacity :one
SELECT max_capacity FROM venues WHERE id = $1
`

func (q *Queries) GetVenueCapacity(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, getVenueCapacity, id)
	var max_capacity int32
	err := row.Scan(&max_capacity)
	return max_capacity, err
}

const joinEvent = `-- name: JoinEvent :one
WITH updated AS (
    UPDATE events 
    SET current_participants = current_participants + 1
    WHERE id = $1 AND current_participants < max_participants
    RETURNING id, current_participants
)
INSERT INTO event_attendees (event_id, user_id)
SELECT $1, $2
FROM updated
RETURNING event_id, user_id
`

type JoinEventParams struct {
	EventID int32 `json:"event_id"`
	UserID  int32 `json:"user_id"`
}

type JoinEventRow struct {
	EventID int32 `json:"event_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) JoinEvent(ctx context.Context, arg JoinEventParams) (JoinEventRow, error) {
	row := q.db.QueryRow(ctx, joinEvent, arg.EventID, arg.UserID)
	var i JoinEventRow
	err := row.Scan(&i.EventID, &i.UserID)
	return i, err
}

const leaveEvent = `-- name: LeaveEvent :one
WITH updated AS (
    UPDATE events 
    SET current_participants = current_participants - 1
    WHERE id = $1 AND current_participants > 0
    RETURNING id, current_participants
)
DELETE FROM event_attendees
WHERE event_id = $1 AND user_id = $2
RETURNING event_id, user_id
`

type LeaveEventParams struct {
	EventID int32 `json:"event_id"`
	UserID  int32 `json:"user_id"`
}

type LeaveEventRow struct {
	EventID int32 `json:"event_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) LeaveEvent(ctx context.Context, arg LeaveEventParams) (LeaveEventRow, error) {
	row := q.db.QueryRow(ctx, leaveEvent, arg.EventID, arg.UserID)
	var i LeaveEventRow
	err := row.Scan(&i.EventID, &i.UserID)
	return i, err
}

const listEventAttendees = `-- name: ListEventAttendees :many
SELECT user_id FROM event_attendees WHERE event_id = $1
`

func (q *Queries) ListEventAttendees(ctx context.Context, eventID int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, listEventAttendees, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var user_id int32
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByAttendeeID = `-- name: ListEventsByAttendeeID :many
SELECT
    events.id,
    events.name,
    events.start_time,
    events.end_time,
    events.location,
    events.max_participants,
    events.current_participants
FROM events
JOIN event_attendees ON events.id = event_attendees.event_id
WHERE event_attendees.user_id = $1
ORDER BY events.start_time ASC
LIMIT $2 OFFSET $3
`

type ListEventsByAttendeeIDParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListEventsByAttendeeIDRow struct {
	ID                  int32            `json:"id"`
	Name                string           `json:"name"`
	StartTime           pgtype.Timestamp `json:"start_time"`
	EndTime             pgtype.Timestamp `json:"end_time"`
	Location            string           `json:"location"`
	MaxParticipants     int32            `json:"max_participants"`
	CurrentParticipants pgtype.Int4      `json:"current_participants"`
}

func (q *Queries) ListEventsByAttendeeID(ctx context.Context, arg ListEventsByAttendeeIDParams) ([]ListEventsByAttendeeIDRow, error) {
	rows, err := q.db.Query(ctx, listEventsByAttendeeID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEventsByAttendeeIDRow{}
	for rows.Next() {
		var i ListEventsByAttendeeIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.MaxParticipants,
			&i.CurrentParticipants,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByCreatorID = `-- name: ListEventsByCreatorID :many
SELECT
    id,
    name,
    start_time,
    end_time,
    location,
    max_participants,
    current_participants
FROM events
WHERE creator_id = $1
ORDER BY start_time ASC
LIMIT $2 OFFSET $3
`

type ListEventsByCreatorIDParams struct {
	CreatorID pgtype.Int4 `json:"creator_id"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

type ListEventsByCreatorIDRow struct {
	ID                  int32            `json:"id"`
	Name                string           `json:"name"`
	StartTime           pgtype.Timestamp `json:"start_time"`
	EndTime             pgtype.Timestamp `json:"end_time"`
	Location            string           `json:"location"`
	MaxParticipants     int32            `json:"max_participants"`
	CurrentParticipants pgtype.Int4      `json:"current_participants"`
}

func (q *Queries) ListEventsByCreatorID(ctx context.Context, arg ListEventsByCreatorIDParams) ([]ListEventsByCreatorIDRow, error) {
	rows, err := q.db.Query(ctx, listEventsByCreatorID, arg.CreatorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEventsByCreatorIDRow{}
	for rows.Next() {
		var i ListEventsByCreatorIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.MaxParticipants,
			&i.CurrentParticipants,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingEvents = `-- name: ListUpcomingEvents :many
SELECT
    id,
    name,
    start_time,
    end_time,
    location,
    max_participants,
    current_participants
FROM events
WHERE start_time > NOW()
ORDER BY start_time ASC
LIMIT $1 OFFSET $2
`

type ListUpcomingEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUpcomingEventsRow struct {
	ID                  int32            `json:"id"`
	Name                string           `json:"name"`
	StartTime           pgtype.Timestamp `json:"start_time"`
	EndTime             pgtype.Timestamp `json:"end_time"`
	Location            string           `json:"location"`
	MaxParticipants     int32            `json:"max_participants"`
	CurrentParticipants pgtype.Int4      `json:"current_participants"`
}

func (q *Queries) ListUpcomingEvents(ctx context.Context, arg ListUpcomingEventsParams) ([]ListUpcomingEventsRow, error) {
	rows, err := q.db.Query(ctx, listUpcomingEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUpcomingEventsRow{}
	for rows.Next() {
		var i ListUpcomingEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.MaxParticipants,
			&i.CurrentParticipants,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newPendingUser = `-- name: NewPendingUser :exec
INSERT INTO pending_users (email, username, code, expires_at) VALUES ($1, $2, $3, $4)
`

type NewPendingUserParams struct {
	Email     string           `json:"email"`
	Username  string           `json:"username"`
	Code      string           `json:"code"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) NewPendingUser(ctx context.Context, arg NewPendingUserParams) error {
	_, err := q.db.Exec(ctx, newPendingUser,
		arg.Email,
		arg.Username,
		arg.Code,
		arg.ExpiresAt,
	)
	return err
}
